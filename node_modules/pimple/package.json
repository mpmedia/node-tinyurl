{
  "name": "pimple",
  "description": "Dependency Injection container for javascript",
  "version": "0.0.2",
  "author": {
    "name": "mparaiso",
    "email": "mparaiso@online.fr"
  },
  "keywords": [
    "pimple",
    "ioc",
    "dependency injection"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Mparaiso/Pimple.js"
  },
  "main": "pimple.js",
  "engines": {
    "node": "*"
  },
  "readme": "#PIMPLE.JS\r\n\r\n### Pimple is a Dependency injection container for javascript , compatible with all javascript enabled browsers.\r\nsee : http://en.wikipedia.org/wiki/Dependency_injection\r\n\r\n### author M.Paraiso , inspired by Pimple by Fabien Potencier : https://github.com/fabpot/Pimple\r\n\r\n#### contact: mparaiso@free.Fr\r\n\r\n### status: beta\r\n\r\n### features:\r\n+ AMD compatible\r\n\r\n## USAGE\r\n\r\n### installation \r\n\r\nin a html file\r\n```html\r\n<script type='text/javascript' src='path/to/pimple/pimple.js'>\r\n```\r\n\r\n### definition\r\n\r\n```javascript\r\nvar pimple = new Pimple()\r\n```\r\nor initialise the container with values\r\n\r\n```javascript\r\nvar pimple = new Pimple({'greet':function(){return \"hi\"},'color':'green'})\r\n```\r\n\r\n#### define a service\r\nyou define a service with an anonymous function\r\n\r\n```javascript\r\n// Pimple.set(name,callback)\r\n// given a Database object\r\npimple.set('database',function (pimple /* pimple is injected in the function */ ) {\r\n    return new Database(pimple.get('connection_string'));\r\n});\r\n\r\n// on recent browsers , you can use accessors ( IE9+,CHROME,FIREFOX,OPERA,SAFARI )\r\npimple.set('database',function (pimple /* pimple is injected in the function */ ) {\r\n    return new Database(pimple.connection_string);\r\n});\r\n```\r\n### define a paramater\r\n```javascript\r\n// just set a scalar value\r\npimple.set('color',\"green\");\r\n```\r\n\r\n#### query for a service\r\n\r\nsince the service is wrapped into a function , it will be lazy-loaded , allowing to save computer CPU.\r\n\r\n```javascript\r\npimple.get('service')\r\n//or on recent browsers support defineProperty  ( IE9+,CHROME,FIREFOX,OPERA,SAFARI )\r\npimple.service\r\npimple['service']\r\n```\r\n\r\n#### define a shared service \r\n\r\nthe service callback with be exectuted only once and the result will be shared for each call\r\n```javascript\r\n// Pimple.share(name,callback)\r\npimple.share('car',function (pimple /* pimple is injected in the function */ ) {\r\n    return {\r\n      engine:\"x\",\r\n      color:\"red\"\r\n    }\r\n});\r\nvar car = pimple.get('car'); // or car = pimple.car on recent browsers supporting accessors\r\ncar.color = 'green'\r\nconsole.log(pimple.get(\"car\").color) // returns green\r\n```\r\n#### define a protected service\r\n\r\n```javascript\r\n//Pimple.protect(name,callback)\r\npimple.protect('sayHi',function(){\r\n      return alert('Hi');\r\n});\r\npimple.get('sayHi')(); // alerts Hi\r\n```\r\n\r\n#### extends a defined service\r\n\r\nPimple.extend returns a service definition ( a callback ).\r\n\r\n```javascript\r\n// define a service ajax_service\r\npimple.set(\"ajax\",function(pimple){\r\n  return new Ajax({method:'GET'});\r\n});\r\n//Pimple.extend(existing_service_name,callback)\r\npimple.set('ajax',pimple.extend('ajax',function(ajax,pimple){\r\n  ajax.method = \"PUT\";\r\n  return ajax;\r\n}));\r\n```\r\n\r\n#### get the service raw definition\r\n\r\nPimple.raw returns the original service defintion ( a scalar or a callback )\r\n\r\n```javascript\r\npimple.set('service',function(pimple){\r\n  new Service();\r\n})\r\n//Pimple.raw(service_name)\r\npimple.raw('service') // return the  service callback definition\r\n```\r\n\r\nCHANGE LOG\r\n0.0.2 register method added\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Mparaiso/Pimple.js/issues"
  },
  "_id": "pimple@0.0.2",
  "_from": "pimple@latest"
}
